service: workshop-${self:custom.name}

custom:
  name: ProductionReadyServerless
  email: christophergradwohl@gmail.com

provider:
  name: aws
  runtime: nodejs12.x

  iamRoleStatements:
    # ***
    # * This adds the dynamodb:scan permission to the Lambda execution role.
    # ***
    - Effect: Allow
      Action: dynamodb:scan
      Resource: !GetAtt RestaurantsTable.Arn
      #  ***
      #  * Adds'execute-api:Invoke' to the IAM execution role, using serverless-pseudo-parameters
      # ***
    - Effect: Allow
      Action: execute-api:Invoke
      #  the request arn to /restaurants much match this template in order to get access.
      Resource: arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:#{ApiGatewayRestApi}/${self:provider.stage}/GET/restaurants

functions:
  get-index:
    handler: functions/get-index.handler
    events:
      - http:
          path: /
          method: get
    environment:
      restaurants_api:
        Fn::Join:
        - ''
        - - "https://"
          - !Ref ApiGatewayRestApi
          - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/restaurants"
  get-restaurants:
    handler: functions/get-restaurants.handler
    events:
      - http:
          path: /restaurants
          method: get
          # now this function requires an IAM Role, which for this exmple will live in the INVOKE EXECUTION IAM ROLE that we defined in the iamRoleStatements
          authorizer: aws_iam
    environment:
      restaurants_table: !Ref RestaurantsTable
# CloudFormation
resources:
  # CloudFormation Resources
  Resources:
    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
  # CloudFormation Outputs - This adds the resoursces to the cloudformation stack !
  # The optional Outputs section declares output values that you can import into
  # other stacks (to create cross-stack references), return in response (to describe stack calls),
  # or view on the AWS CloudFormation console. For example, you can output the S3 bucket
  # name for a stack to make the bucket easier to find.
  Outputs:
    RestaurantsTableName:
      Value: !Ref RestaurantsTable

# Serverless Framework Plugins
plugins:
  - serverless-export-env
  - serverless-pseudo-parameters